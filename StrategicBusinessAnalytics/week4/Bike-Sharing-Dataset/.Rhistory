lines(data$time,regres$fitted.values,type='l',col='blue',lty=2)
legend("topleft",c("Actual sales","Sales by the model"),lty=c(1,2),col=c('black','blue'))
plot(data$time,data$sales,main="Chocolate sales over time",xlab="Time (in month)",ylab="Monthly sales",ylim=c(0,max(data$sales)*1.2),type='l')
plot(data$time,data$sales,main="Chocolate sales over time",xlab="Time (in month)",ylab="Monthly sales",ylim=c(0,max(data$sales*1.2)),type='l')
regres=lm(sales~month,data=data) # Build a linear regression model
summary(regres)
# Boxplots:
plot(data$month,data$sales,main="Chocolate sales by month",xlab="Month",ylab="Monthly sales",ylim=c(0,max(data$sales*1.2)))
# Recovery thanks to the model:
plot(data$time,data$sales,main="Chocolate sales over time",xlab="Time (in month)",ylab="Monthly sales",ylim=c(0,max(data$sales)*1.2),type='l')
lines(data$time,regres$fitted.values,type='l',col='blue',lty=2)
legend("topleft",c("Actual sales","Sales by the model"),lty=c(1,2),col=c('black','blue'))
setwd("~/BDA/BusinessAnalytics/ESSEC/StrategicBusinessAnalytics/week4/Bike-Sharing-Dataset")
i
rm(list=ls(all=TRUE))
# To clean up the memory of your current R session run the following line
rm(list=ls(all=TRUE))
# Let's load our dataset and call it data
data=read.table('hour.csv',sep=',',header=TRUE) # The function read.table enables us to read flat files such as .csv files
data$dteday = as.Date(data$dteday, "%Y-%m-%d")
# Now let's have a look at our variables and see some summary statistics
str(data) # The str() function shows the structure of your dataset and details the type of variables that it contains
summary(data) # The summary() function provides for each variable in your dataset the minimum, mean, maximum and quartiles
plot(data$dteday,data$cnt,main="Count over time",xlab="Time (in month)",ylab="Monthly count",ylim=c(0,max(data$cnt*1.2)),type='l')
tempdata=data
aggbTimeRank=aggregate(cnt~ dteday, data=tempdata, FUN=mean) # We compute the average attrition rate for each value of TIC
plot(data$dteday,data$cnt,main="Count over time",xlab="Time (in month)",ylab="Monthly count",ylim=c(0,max(data$cnt*1.2)),type='l')
plot(aggbTimeRank$dteday,aggbTimeRank$cnt,main="Count over time",xlab="Time (in month)",ylab="Monthly count",ylim=c(0,max(data$cnt*1.2)),type='l')
regres=lm(cnt~dteday,data=aggbTimeRank) # Build a linear regression model
summary(regres)
plot(aggbTimeRank$dteday,aggbTimeRank$cnt,main="Bike Count by date",xlab="Month",ylab="Count by date",ylim=c(0,max(data$cnt*1.2)))
plot(data$dteday,data$cnt,main="Chocolate sales by month",xlab="Month",ylab="Monthly sales",ylim=c(0,max(data$cnt*1.2)))
plot(aggbTimeRank$dteday,aggbTimeRank$cnt,main="Bike Count by date",xlab="Month",ylab="Count by date",ylim=c(0,max(aggbTimeRank$cnt*1.2)))
tempdata=data
aggbTimeRank=aggregate(cnt~ dteday, data=tempdata, FUN=mean) # We compute the average attrition rate for each value of TIC
plot(data$dteday,data$cnt,main="Count over time",xlab="Time (in month)",ylab="Monthly count",ylim=c(0,max(data$cnt*1.2)),type='l')
plot(aggbTimeRank$dteday,aggbTimeRank$cnt,main="Count over time",xlab="Time (in month)",ylab="Monthly count",ylim=c(0,max(data$cnt*1.2)),type='l')
plot(aggbTimeRank$dteday,aggbTimeRank$cnt,main="Count over time",xlab="Time (in month)",ylab="Monthly count",ylim=c(0,max(data$cnt*1.2)),type='l')
regres=lm(cnt~dteday,data=aggbTimeRank) # Build a linear regression model
summary(regres)
# Boxplots:
plot(aggbTimeRank$dteday,aggbTimeRank$cnt,main="Bike Count by date",xlab="Month",ylab="Count by date",ylim=c(0,max(aggbTimeRank$cnt*1.2)))
plot(data$dteday,data$cnt,main="Chocolate sales by month",xlab="Month",ylab="Monthly sales",ylim=c(0,max(data$cnt*1.2)))
plot(aggbTimeRank$dteday,aggbTimeRank$cnt,main="Bike Count by date",xlab="Month",ylab="Count by date",ylim=c(0,max(aggbTimeRank$cnt*1.2)))
tempdata=data
aggbTimeRank=aggregate(cnt~ dteday, data=tempdata, FUN=mean) # We compute the average attrition rate for each value of TIC
plot(aggbTimeRank$dteday,aggbTimeRank$cnt,main="Count over time",xlab="Time (in month)",ylab="Monthly count",ylim=c(0,max(data$cnt*1.2)),type='l')
regres=lm(cnt~dteday,data=aggbTimeRank) # Build a linear regression model
summary(regres)
# Plots:
plot(data$dteday,data$cnt,main="Count over time",xlab="Time (in month)",ylab="Monthly count",ylim=c(0,max(data$cnt*1.2)),type='l')
plot(aggbTimeRank$dteday,aggbTimeRank$cnt,main="Bike Count by date",xlab="Month",ylab="Count by date",ylim=c(0,max(aggbTimeRank$cnt*1.2)))
plot(aggbTimeRank$dteday,aggbTimeRank$cnt,main="Count over time",xlab="Time (in month)",ylab="Monthly count",ylim=c(0,max(aggbTimeRank$cnt*1.2)),type='l')
regres=lm(cnt~mnth,data=aggbTimeRank) # Build a linear regression model
regres=lm(cnt~mnth,data=data) # Build a linear regression model
summary(regres)
# Plots:
plot(data$dteday,data$cnt,main="Count over time",xlab="Time (in month)",ylab="Monthly count",ylim=c(0,max(data$cnt*1.2)),type='l')
plot(aggbTimeRank$dteday,aggbTimeRank$cnt,main="Bike Count by date",xlab="Month",ylab="Count by date",ylim=c(0,max(aggbTimeRank$cnt*1.2)))
# An aggregated plot: date
tempdata=data
aggbTimeRank=aggregate(cnt~ dteday, data=tempdata, FUN=mean) # We compute the average attrition rate for each value of TIC
plot(aggbTimeRank$dteday,aggbTimeRank$cnt,main= "Bike use", ylab="Count", xlab= "season")
# Recovery thanks to the model:
plot(aggbTimeRank$dteday,aggbTimeRank$cnt,main="Bike count over time",xlab="Time (in month)",ylab="Monthly sales",ylim=c(0,max(aggbTimeRank$cnt)*1.2),type='l')
lines(data$dteday,regres$fitted.values,type='l',col='blue',lty=2)
legend("topleft",c("Actual count","Count by the model"),lty=c(1,2),col=c('black','blue'))
setwd("~/BDA/BusinessAnalytics/ESSEC/StrategicBusinessAnalytics/week3")
rm(list=ls())
# to clean up the memory of your current R session run the following line
rm(list=ls())
# Let's load our dataset and call it data
data=read.table('DATA_4.04_CHOC.csv',sep=',',header=TRUE) # The function read.table enables us to read flat files such as .csv files
# Now let's have a look at our variables and see some summary statistics
str(data) # The str() function shows the structure of your dataset and details the type of variables that it contains
summary(data$sales) # The summary() function provides for each variable in your dataset the minimum, mean, maximum and quartiles
View(data)
setwd("~/BDA/BusinessAnalytics/ESSEC/StrategicBusinessAnalytics/week4/Bike-Sharing-Dataset")
# To clean up the memory of your current R session run the following line
rm(list=ls(all=TRUE))
rm(list=ls(all=TRUE))
# Let's load our dataset and call it data
data=read.table('hour.csv',sep=',',header=TRUE) # The function read.table enables us to read flat files such as .csv files
data$dteday = as.Date(data$dteday, "%Y-%m-%d")
# Now let's have a look at our variables and see some summary statistics
str(data) # The str() function shows the structure of your dataset and details the type of variables that it contains
summary(data) # The summary() function provides for each variable in your dataset the minimum, mean, maximum and quartiles
plot(data$dteday,data$cnt,main="Count over time",xlab="Time (in month)",ylab="Monthly count",ylim=c(0,max(data$cnt*1.2)),type='l')
regres=lm(cnt~instance,data=data) # Build a linear regression model
regres=lm(cnt~instant,data=data) # Build a linear regression model
summary(regres)
plot(data$instant,data$cnt,main="Count over time",xlab="Time (in month)",ylab="Monthly count",ylim=c(0,max(data$cnt*1.2)),type='l')
plot(data$instant, data$cnt,main="Bike count over time",xlab="Time (in month)",ylab="Monthly sales",ylim=c(0,max(aggbTimeRank$cnt)*1.2),type='l')
plot(data$instant, data$cnt,main="Bike count over time",xlab="Time (in month)",ylab="Monthly sales",ylim=c(0,max(data$cnt)*1.2),type='l')
lines(data$instant,regres$fitted.values,type='l',col='blue',lty=2)
legend("topleft",c("Actual count","Count by the model"),lty=c(1,2),col=c('black','blue'))
tempdata=data
aggbTimeRank=aggregate(cnt~ dteday, data=tempdata, FUN=mean) # We compute the average attrition rate for each value of TIC
plot(aggbTimeRank$dteday,aggbTimeRank$cnt,main="Count over time",xlab="Time (in month)",ylab="Monthly count",ylim=c(0,max(aggbTimeRank$cnt*1.2)),type='l')
regres=lm(cnt~instant,data=data) # Build a linear regression model
summary(regres)
tempdata=data
aggbTimeRank=aggregate(cnt~ instant, data=tempdata, FUN=mean) # We compute the average attrition rate for each value of TIC
plot(aggbTimeRank$instant,aggbTimeRank$cnt,main="Count over time",xlab="Time (in month)",ylab="Monthly count",ylim=c(0,max(aggbTimeRank$cnt*1.2)),type='l')
regres=lm(cnt~instant,data=data) # Build a linear regression model
summary(regres)
# Plots:
plot(data$instant,data$cnt,main="Count over time",xlab="Time (in month)",ylab="Monthly count",ylim=c(0,max(data$cnt*1.2)),type='l')
plot(aggbTimeRank$instant,aggbTimeRank$cnt,main="Bike Count by date",xlab="Month",ylab="Count by date",ylim=c(0,max(aggbTimeRank$cnt*1.2)))
plot(data$instant, data$cnt,main="Bike count over time",xlab="Time (in month)",ylab="Monthly sales",ylim=c(0,max(data$cnt)*1.2),type='l')
lines(data$instant,regres$fitted.values,type='l',col='blue',lty=2)
plot(aggbTimeRank$instant, aggbTimeRank$cnt,main="Bike count over time",xlab="Time (in month)",ylab="Monthly sales",ylim=c(0,max(aggbTimeRank$cnt)*1.2),type='l')
lines(data$instant,regres$fitted.values,type='l',col='blue',lty=2)
legend("topleft",c("Actual count","Count by the model"),lty=c(1,2),col=c('black','blue'))
plot(data$instant,data$cnt,main="Count over time",xlab="Time (in month)",ylab="Monthly count",ylim=c(0,max(data$cnt*1.2)),type='l')
plot(data$instant,data$cnt/24,main="Count over time",xlab="Time (in month)",ylab="Monthly count",ylim=c(0,max(data$cnt*1.2)),type='l')
plot(data$instant,data$cnt,main="Count over time",xlab="Time (in month)",ylab="Monthly count",ylim=c(0,max(data$cnt*1.2)),type='l')
plot(data$instant,data$cnt,main="Count over time",xlab="Time (in month)",ylab="Monthly count",ylim=c(0,max(data$cnt*1.2)))
,type='l'
plot(data$instant,data$cnt,main="Count over time",xlab="Time (in month)",ylab="Monthly count",ylim=c(0,max(data$cnt*1.2)),type='l')
data=read.table('day.csv',sep=',',header=TRUE) # The function read.table enables us to read flat files such as .csv files
# To clean up the memory of your current R session run the following line
rm(list=ls(all=TRUE))
# Let's load our dataset and call it data
data=read.table('day.csv',sep=',',header=TRUE) # The function read.table enables us to read flat files such as .csv files
data$dteday = as.Date(data$dteday, "%Y-%m-%d")
# Now let's have a look at our variables and see some summary statistics
str(data) # The str() function shows the structure of your dataset and details the type of variables that it contains
summary(data) # The summary() function provides for each variable in your dataset the minimum, mean, maximum and quartiles
hist(data$mnth) # Produce a histogram of the credit scores
cor(data[,c(3:17)]) # Compute the correlation between all the numerical variables of the sample
linreg=lm(cnt~. ,data=data) # Estimate a linear regression model of Rating as a function of everything else.
cor(linreg$fitted.values,data$cnt) # Computes the correlation between the fitted values and the actual ones
plot(data$cnt,linreg$fitted.values) # Plot the fitted values vs. the actual ones
summary(linreg) # Reports the results of the regression
plot(data$dteday, data$hum) # Allows to visualize the relationship between humidity and count
plot(data$mnth, data$cnt) # Allows to visualize the relationship between humidity and count
# An aggregated plot: month
tempdata=data
aggbTimeRank=aggregate(cnt~ month, data=tempdata, FUN=mean) # We compute the average attrition rate for each value of TIC
plot(aggbTimeRank$mnth,aggbTimeRank$cnt,main= "Bike use", ylab="Count", xlab= "month")
# An aggregated plot: month
tempdata=data
aggbTimeRank=aggregate(cnt~ mnth, data=tempdata, FUN=mean) # We compute the average attrition rate for each value of TIC
plot(aggbTimeRank$mnth,aggbTimeRank$cnt,main= "Bike use", ylab="Count", xlab= "month")
plot(aggbTimeRank$mnth,aggbTimeRank$cnt,main= "Bike use", ylab="Count", xlab= "month", type='l')
plot(aggbTimeRank$mnth,aggbTimeRank$cnt,main= "Bike use", ylab="Count", xlab= "month", type='l')
plot(data$mnth,data$cnt,main= "Bike use", ylab="Count", xlab= "month", type='l')
plot(data$mnth,data$cnt,main= "Bike use", ylab="Count", xlab= "month")
plot(aggbTimeRank$mnth,aggbTimeRank$cnt,main= "Bike use", ylab="Count", xlab= "month", type='l')
plot(aggbTimeRank$instant,aggbTimeRank$cnt,main="Count over time",xlab="Time (in month)",ylab="Monthly count",ylim=c(0,max(aggbTimeRank$cnt*1.2)),type='l')
plot(aggbTimeRank$instant,aggbTimeRank$cnt,main="Count over time",xlab="Time (in month)",ylab="Monthly count")
plot(data$instant,data$cnt,main="Count over time",xlab="Time (in month)",ylab="Monthly count")
plot(data$instant,data$cnt,main="Count over time",xlab="Time (in month)",ylab="Monthly count",ylim=c(0,max(data$cnt*1.2)),type='l')
plot(aggbTimeRank$instant,aggbTimeRank$cnt,main="Bike Count by date",xlab="Month",ylab="Count by date",ylim=c(0,max(aggbTimeRank$cnt*1.2)))
plot(aggbTimeRank$mnth,aggbTimeRank$cnt,main="Bike Count by date",xlab="Month",ylab="Count by date",ylim=c(0,max(aggbTimeRank$cnt*1.2)))
plot(aggbTimeRank$mnth,aggbTimeRank$cnt,main="Bike Count by date",xlab="Month",ylab="Count by date",ylim=c(0,max(aggbTimeRank$cnt*1.2)),type='l')
plot(data$instant, data$cnt,main="Bike count over time",xlab="Time (in month)",ylab="Monthly sales",ylim=c(0,max(data$cnt)*1.2),type='l')
plot(data$instant,data$cnt,main="Count over time",xlab="Time (in month)",ylab="Monthly count",ylim=c(0,max(data$cnt*1.2)),type='l')
lines(data$instant,regres$fitted.values,type='l',col='blue',lty=2)
regres=lm(cnt~instant,data=data) # Build a linear regression model
lines(data$instant,regres$fitted.values,type='l',col='blue',lty=2)
legend("topleft",c("Actual count","Count by the model"),lty=c(1,2),col=c('black','blue'))
plot(data$instant,data$cnt,main="Count over time",xlab="Time (in month)",ylab="Monthly count")
regres=lm(cnt~mnth,data=data) # Build a linear regression model
summary(regres)
# Recovery thanks to the model:
plot(data$instant, data$cnt,main="Bike count over time",xlab="Time (in month)",ylab="Monthly sales",ylim=c(0,max(data$cnt)*1.2),type='l')
lines(data$instant,regres$fitted.values,type='l',col='blue',lty=2)
legend("topleft",c("Actual count","Count by the model"),lty=c(1,2),col=c('black','blue'))
regres=lm(cnt~.,data=data) # Build a linear regression model
summary(regres)
# Recovery thanks to the model:
plot(data$instant, data$cnt,main="Bike count over time",xlab="Time (in month)",ylab="Monthly sales",ylim=c(0,max(data$cnt)*1.2),type='l')
lines(data$instant,regres$fitted.values,type='l',col='blue',lty=2)
legend("topleft",c("Actual count","Count by the model"),lty=c(1,2),col=c('black','blue'))
regres=lm(cnt~mnth,data=data) # Build a linear regression model
summary(regres)
# Recovery thanks to the model:
plot(data$instant, data$cnt,main="Bike count over time",xlab="Time (in month)",ylab="Monthly sales",ylim=c(0,max(data$cnt)*1.2),type='l')
lines(data$instant,regres$fitted.values,type='l',col='blue',lty=2)
legend("topleft",c("Actual count","Count by the model"),lty=c(1,2),col=c('black','blue'))
plot(data$instant,data$cnt,main="Count over time",xlab="Time (in month)",ylab="Monthly count")
plot(data$mnth,data$cnt,main="Count by month",xlab="Time (in month)",ylab="Monthly count")
tempdata=data
aggbTimeRank=aggregate(cnt~ mnth, data=tempdata, FUN=mean) # We compute the average attrition rate for each value of TIC
plot(aggbTimeRank$mnth,aggbTimeRank$cnt,main= "Bike use", ylab="Count", xlab= "month", type='l')
plot(aggbTimeRank$mnth,aggbTimeRank$cnt,main= "Bike use by month", ylab="Count", xlab= "month", type='l')
# Seasonality
# An aggregated plot: instant (time)
plot(data$instant,data$cnt,main="Count over time",xlab="Time (in month)",ylab="Monthly count")
regres=lm(cnt~mnth,data=data) # Build a linear regression model
summary(regres)
# Recovery thanks to the model:
plot(data$instant, data$cnt,main="Bike count over time",xlab="Time (in month)",ylab="Monthly sales",ylim=c(0,max(data$cnt)*1.2),type='l')
lines(data$instant,regres$fitted.values,type='l',col='blue',lty=2)
legend("topleft",c("Actual count","Count by the model"),lty=c(1,2),col=c('black','blue'))
plot(data$instant,data$cnt,main="Count over time",xlab="Time (in month)",ylab="Monthly count")
plot(data$instant, data$cnt,main="Bike count over time",xlab="Time (in month)",ylab="Monthly sales",ylim=c(0,max(data$cnt)*1.2),type='l')
regres=lm(cnt~hum,data=data) # Build a linear regression model
summary(regres)
# Recovery thanks to the model:
plot(data$instant, data$cnt,main="Bike count over time",xlab="Time (in month)",ylab="Monthly sales",ylim=c(0,max(data$cnt)*1.2),type='l')
lines(data$instant,regres$fitted.values,type='l',col='blue',lty=2)
regres=lm(cnt~season,data=data) # Build a linear regression model
summary(regres)
# Recovery thanks to the model:
plot(data$instant, data$cnt,main="Bike count over time",xlab="Time (in month)",ylab="Monthly sales",ylim=c(0,max(data$cnt)*1.2),type='l')
lines(data$instant,regres$fitted.values,type='l',col='blue',lty=2)
plot(data$instant,data$cnt,main="Count over time",xlab="Time (in month)",ylab="Monthly count")
regres=lm(cnt~temp,data=data) # Build a linear regression model
summary(regres)
# Recovery thanks to the model:
plot(data$instant, data$cnt,main="Bike count over time",xlab="Time (in month)",ylab="Monthly sales",ylim=c(0,max(data$cnt)*1.2),type='l')
lines(data$instant,regres$fitted.values,type='l',col='blue',lty=2)
legend("topleft",c("Actual count","Count by the model"),lty=c(1,2),col=c('black','blue'))
plot(data$instant, data$cnt,main="Bike count over time",xlab="Time (in month)",ylab="Monthly Count",ylim=c(0,max(data$cnt)*1.2),type='l')
lines(data$instant,regres$fitted.values,type='l',col='blue',lty=2)
legend("topleft",c("Actual count","Count by the model"),lty=c(1,2),col=c('black','blue'))
summary(data) # The summary() function provides for each variable in your dataset the minimum, mean, maximum and quartiles
tempdata=data
aggbTimeRank=aggregate(cnt~ mnth, data=tempdata, FUN=mean) # We compute the average attrition rate for each value of TIC
plot(aggbTimeRank$mnth,aggbTimeRank$cnt,main= "Bike use by month", ylab="Count", xlab= "month", type='l')
summary(aggbTimeRank)
View(data)
plot(aggbTimeRank$mnth,aggbTimeRank$cnt,main= "Bike use by month", ylab="Count", xlab= "month")
plot(data$cnt,linreg$fitted.values) # Plot the fitted values vs. the actual ones
plot(aggbTimeRank$hum,aggbTimeRank$cnt,main= "Bike use", ylab="Count", xlab= "humidity")
tempdata=data
aggbTimeRank=aggregate(cnt~ hum, data=tempdata, FUN=mean) # We compute the average attrition rate for each value of TIC
plot(aggbTimeRank$hum,aggbTimeRank$cnt,main= "Bike use", ylab="Count", xlab= "humidity")
# An aggregated plot: weather situation
tempdata=data
aggbTimeRank=aggregate(cnt~ weathersit, data=tempdata, FUN=mean) # We compute the average attrition rate for each value of TIC
plot(aggbTimeRank$weathersit,aggbTimeRank$cnt,main= "Bike use", ylab="Count", xlab= "Weather Situation")
# An aggregated plot: week day
tempdata=data
aggbTimeRank=aggregate(cnt~ weekday, data=tempdata, FUN=mean) # We compute the average attrition rate for each value of TIC
plot(aggbTimeRank$weekday,aggbTimeRank$cnt,main= "Bike use", ylab="Count", xlab= "Week day")
# An aggregated plot: season
tempdata=data
counts <- table(data$cnt)
barplot(counts, main="Bike Count", horiz=TRUE,
names.arg=c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "July", "Aug", "Sept", "Oct", "Nov", "Dec"))
counts <- table(data$mnth)
barplot(counts, main="Bike Count", horiz=TRUE,
names.arg=c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "July", "Aug", "Sept", "Oct", "Nov", "Dec"))
counts <- table(aggbTimeRank$mnth)
barplot(counts, main="Bike Count", horiz=TRUE,
names.arg=c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "July", "Aug", "Sept", "Oct", "Nov", "Dec"))
counts <- table(aggbTimeRank$cnt)
barplot(counts, main="Bike Count", horiz=TRUE,
names.arg=c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "July", "Aug", "Sept", "Oct", "Nov", "Dec"))
counts <- table(aggbTimeRank$mnth)
barplot(counts, main="Bike Count", horiz=TRUE,
names.arg=c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "July", "Aug", "Sept", "Oct", "Nov", "Dec"))
counts <- table(data$mnth)
barplot(counts, main="Bike Count", horiz=TRUE,
names.arg=c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "July", "Aug", "Sept", "Oct", "Nov", "Dec"))
counts
tempdata=data
aggbTimeRank=aggregate(cnt~ mnth, data=tempdata, FUN=mean) # We compute the average attrition rate for each value of TIC
plot(aggbTimeRank$mnth,aggbTimeRank$cnt,main= "Bike use by month", ylab="Count", xlab= "month", type='l')
plot(aggbTimeRank$mnth,aggbTimeRank$cnt,main= "Bike use by month", ylab="Count", xlab= "month", type='l')
plot(aggbTimeRank$mnth,aggbTimeRank$cnt,main= "Bike use by month", ylab="Count", xlab= "month")
plot(aggbTimeRank$mnth,aggbTimeRank$cnt,main= "Bike use by month", ylab="Count", xlab= "month", type='bar')
plot(aggbTimeRank$mnth,aggbTimeRank$cnt,main= "Bike use by month", ylab="Count", xlab= "month", type='h')
plot(aggbTimeRank$mnth,aggbTimeRank$cnt,main= "Bike use by month", ylab="Count", xlab= "month",
names.arg=c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "July", "Aug", "Sept", "Oct", "Nov", "Dec"))
summary(aggbTimeRank)
plot(aggbTimeRank$mnth,aggbTimeRank$cnt,main= "Bike use by month", ylab="Count", xlab= "month", type='s')
plot(aggbTimeRank$mnth,aggbTimeRank$cnt,main= "Bike use by month", ylab="Count", xlab= "month", type='l')
counts <- table(aggbTimeRank$cnt)
barplot(counts, main="Bike Count", horiz=TRUE,
names.arg=c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "July", "Aug", "Sept", "Oct", "Nov", "Dec"))
counts <- table(aggbTimeRank$mnth)
barplot(counts, main="Bike Count", horiz=TRUE,
names.arg=c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "July", "Aug", "Sept", "Oct", "Nov", "Dec"))
aggbTimeRank
counts <- table(aggbTimeRank$cnt)
counts
barplot(counts, main="Bike Count", horiz=TRUE,
names.arg=c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "July", "Aug", "Sept", "Oct", "Nov", "Dec"))
barplot(aggbTimeRank$cnt, main="Bike Count", horiz=TRUE,
names.arg=c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "July", "Aug", "Sept", "Oct", "Nov", "Dec"))
par(las=2) # make label text perpendicular to axis
par(mar=c(5,8,4,2)) # increase y-axis margin.
# Fitting Labels
par(las=2) # make label text perpendicular to axis
par(mar=c(5,8,4,2)) # increase y-axis margin.
barplot(aggbTimeRank$cnt, main="Bike Count", horiz=TRUE,
names.arg=c("J", "Feb", "Mar", "Apr", "May", "Jun", "July", "Aug", "Sept", "Oct", "Nov", "Dec"),
cex.names=0.8)
par(las=1) # make label text perpendicular to axis
par(mar=c(5,8,4,2)) # increase y-axis margin.
barplot(aggbTimeRank$cnt, main="Bike Count", horiz=TRUE,
names.arg=c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "July", "Aug", "Sept", "Oct", "Nov", "Dec"),
cex.names=0.8)
aggbTimeRank
par(las=1) # make label text perpendicular to axis
par(mar=c(5,8,4,2)) # increase y-axis margin.
barplot(aggbTimeRank$cnt, main="Bike Count", horiz=TRUE,
names.arg=rev(c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "July", "Aug", "Sept", "Oct", "Nov", "Dec")),
cex.names=0.8)
par(las=1) # make label text perpendicular to axis
par(mar=c(5,8,4,2)) # increase y-axis margin.
barplot(aggbTimeRank$cnt, main="Bike Count", horiz=TRUE,
names.arg=c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "July", "Aug", "Sept", "Oct", "Nov", "Dec"),
cex.names=0.8)
par(las=1) # make label text perpendicular to axis
par(mar=c(5,8,4,2)) # increase y-axis margin.
barplot(rev(aggbTimeRank$cnt), main="Bike Count", horiz=TRUE,
names.arg=rev(c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "July", "Aug", "Sept", "Oct", "Nov", "Dec")),
cex.names=0.8)
par(las=1) # make label text perpendicular to axis
par(mar=c(5,8,4,2)) # increase y-axis margin.
barplot(rev(aggbTimeRank$cnt), main="Bike Count", horiz=TRUE,
names.arg=rev(c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "July", "Aug", "Sept", "Oct", "Nov", "Dec")),
ylab="Count", xlab= "Month",
cex.names=0.8)
par(las=1) # make label text perpendicular to axis
par(mar=c(5,8,4,2)) # increase y-axis margin.
barplot(rev(aggbTimeRank$cnt), main="Bike Count", horiz=TRUE,
names.arg=rev(c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "July", "Aug", "Sept", "Oct", "Nov", "Dec")),
ylab="Count", xlab= "Month",
col=c("darkblue"),
cex.names=0.8)
par(las=1) # make label text perpendicular to axis
par(mar=c(5,8,4,2)) # increase y-axis margin.
barplot(rev(aggbTimeRank$cnt), main="Bike Count", horiz=TRUE,
names.arg=rev(c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "July", "Aug", "Sept", "Oct", "Nov", "Dec")),
ylab="Count", xlab= "Month",
col=c("cyanblue"),
cex.names=0.8)
par(las=1) # make label text perpendicular to axis
par(mar=c(5,8,4,2)) # increase y-axis margin.
barplot(rev(aggbTimeRank$cnt), main="Bike Count", horiz=TRUE,
names.arg=rev(c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "July", "Aug", "Sept", "Oct", "Nov", "Dec")),
ylab="Count", xlab= "Month",
col=c("cyan"),
cex.names=0.8)
par(las=1) # make label text perpendicular to axis
par(mar=c(5,8,4,2)) # increase y-axis margin.
barplot(rev(aggbTimeRank$cnt), main="Bike Count", horiz=TRUE,
names.arg=rev(c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "July", "Aug", "Sept", "Oct", "Nov", "Dec")),
ylab="Count", xlab= "Month",
col=c("darkblue"),
cex.names=0.8)
par(las=1) # make label text perpendicular to axis
par(mar=c(5,8,4,2)) # increase y-axis margin.
barplot(rev(aggbTimeRank$cnt), main="Bike Count", horiz=TRUE,
names.arg=rev(c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "July", "Aug", "Sept", "Oct", "Nov", "Dec")),
ylab="Month", xlab= "Count",
col=c("darkblue"),
cex.names=0.8)
summary(aggbTimeRank$cnt)
par(las=1) # make label text perpendicular to axis
par(mar=c(5,8,4,2)) # increase y-axis margin.
barplot(rev(aggbTimeRank$cnt), main="Bike Count by Month", horiz=TRUE,
names.arg=rev(c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "July", "Aug", "Sept", "Oct", "Nov", "Dec")),
ylab="Month", xlab= "Count",
col=c("darkblue"),
cex.names=0.8)
par(las=1) # make label text perpendicular to axis
par(mar=c(5,8,4,2)) # increase y-axis margin.
barplot(rev(aggbTimeRank$cnt), horiz=TRUE,
names.arg=rev(c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "July", "Aug", "Sept", "Oct", "Nov", "Dec")),
ylab="Month", xlab= "Count",
col=c("darkblue"),
cex.names=0.8)
par(las=1) # make label text perpendicular to axis
par(mar=c(5,8,4,2)) # increase y-axis margin.
barplot(rev(aggbTimeRank$cnt), main="Average Bike Rental by Month", horiz=TRUE,
names.arg=rev(c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "July", "Aug", "Sept", "Oct", "Nov", "Dec")),
ylab="Month", xlab= "Average Bike Rental",
col=c("darkblue"),
cex.names=0.8)
par(las=1) # make label text perpendicular to axis
par(mar=c(5,8,4,2)) # increase y-axis margin.
barplot(rev(aggbTimeRank$cnt), main="Average Bike Rental by Month", horiz=TRUE,
names.arg=rev(c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "July", "Aug", "Sept", "Oct", "Nov", "Dec")),
ylab="Month", xlab= "Average Bike Rental",
col=c("darkblue"),
beside=TRUE,
cex.names=0.8)
par(las=1) # make label text perpendicular to axis
par(mar=c(5,8,4,2)) # increase y-axis margin.
plot <- barplot(rev(aggbTimeRank$cnt), main="Average Bike Rental by Month", horiz=TRUE,
names.arg=rev(c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "July", "Aug", "Sept", "Oct", "Nov", "Dec")),
ylab="Month", xlab= "Average Bike Rental",
col=c("darkblue"),
beside=TRUE,
cex.names=0.8)
text(x= aggbTimeRank$cnt, y= plot, labels=as.character(aggbTimeRank$cnt), xpd=TRUE)
text(x= rev(aggbTimeRank$cnt), y= plot, labels=as.character(aggbTimeRank$cnt), xpd=TRUE)
par(las=1) # make label text perpendicular to axis
par(mar=c(5,8,4,2)) # increase y-axis margin.
plot <- barplot(rev(as.integer(aggbTimeRank$cnt)), main="Average Bike Rental by Month", horiz=TRUE,
names.arg=rev(c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "July", "Aug", "Sept", "Oct", "Nov", "Dec")),
ylab="Month", xlab= "Average Bike Rental",
col=c("darkblue"),
beside=TRUE,
cex.names=0.8)
text(x= rev(aggbTimeRank$cnt), y= plot, labels=as.character(aggbTimeRank$cnt), xpd=TRUE)
text(x= rev(aggbTimeRank$cnt), y= plot, labels=as.character(as.integer(aggbTimeRank$cnt)), xpd=TRUE)
par(las=1) # make label text perpendicular to axis
par(mar=c(5,8,4,2)) # increase y-axis margin.
plot <- barplot(rev(as.integer(aggbTimeRank$cnt)), main="Average Bike Rental by Month", horiz=TRUE,
names.arg=rev(c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "July", "Aug", "Sept", "Oct", "Nov", "Dec")),
ylab="Month", xlab= "Average Bike Rental",
col=c("darkblue"),
beside=TRUE,
cex.names=0.8)
text(x= rev(aggbTimeRank$cnt), y= plot, labels=as.character(as.integer(aggbTimeRank$cnt)), xpd=TRUE)
par(las=1) # make label text perpendicular to axis
par(mar=c(5,8,4,2)) # increase y-axis margin.
plot <- barplot(rev(as.integer(aggbTimeRank$cnt)), main="Average Bike Rental by Month", horiz=TRUE,
names.arg=rev(c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "July", "Aug", "Sept", "Oct", "Nov", "Dec")),
ylab="Month", xlab= "Average Bike Rental",
col=c("darkblue"),
beside=TRUE,
cex.names=0.8)
text(x= rev(aggbTimeRank$cnt), y= plot, labels=as.character(as.integer(aggbTimeRank$cnt)))
par(las=1) # make label text perpendicular to axis
par(mar=c(5,8,4,2)) # increase y-axis margin.
plot <- barplot(rev(as.integer(aggbTimeRank$cnt)), main="Average Bike Rental by Month", horiz=TRUE,
names.arg=rev(c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "July", "Aug", "Sept", "Oct", "Nov", "Dec")),
ylab="Month", xlab= "Average Bike Rental",
col=c("darkblue"),
cex.names=0.8)
text(x= rev(aggbTimeRank$cnt), y= plot, labels=as.character(as.integer(aggbTimeRank$cnt)))
par(las=1) # make label text perpendicular to axis
par(mar=c(5,8,4,2)) # increase y-axis margin.
plot <- barplot(rev(as.integer(aggbTimeRank$cnt)), main="Average Bike Rental by Month", horiz=TRUE,
names.arg=rev(c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "July", "Aug", "Sept", "Oct", "Nov", "Dec")),
ylab="Month", xlab= "Average Bike Rental",
col=c("darkblue"),
cex.names=0.8)
text(x= rev(aggbTimeRank$cnt)+0.3, y= plot, labels=as.character(as.integer(aggbTimeRank$cnt)))
text(x= rev(aggbTimeRank$cnt)+10, y= plot, labels=as.character(as.integer(aggbTimeRank$cnt)))
text(x= rev(aggbTimeRank$cnt)+50, y= plot, labels=as.character(as.integer(aggbTimeRank$cnt)))
par(las=1) # make label text perpendicular to axis
par(mar=c(5,8,4,2)) # increase y-axis margin.
plot <- barplot(rev(as.integer(aggbTimeRank$cnt)), main="Average Bike Rental by Month", horiz=TRUE,
names.arg=rev(c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "July", "Aug", "Sept", "Oct", "Nov", "Dec")),
ylab="Month", xlab= "Average Bike Rental",
col=c("darkblue"),
cex.names=0.8)
text(x= rev(aggbTimeRank$cnt)+200, y= plot, labels=as.character(as.integer(aggbTimeRank$cnt)))
par(las=1) # make label text perpendicular to axis
par(mar=c(5,8,4,2)) # increase y-axis margin.
plot <- barplot(rev(as.integer(aggbTimeRank$cnt)), main="Average Bike Rental by Month", horiz=TRUE,
names.arg=rev(c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "July", "Aug", "Sept", "Oct", "Nov", "Dec")),
ylab="Month", xlab= "Average Bike Rental",
col=c("darkblue"),
cex.names=0.8)
text(x= rev(aggbTimeRank$cnt)+300, y= plot, labels=as.character(as.integer(aggbTimeRank$cnt)))
par(las=1) # make label text perpendicular to axis
par(mar=c(5,8,4,2)) # increase y-axis margin.
plot <- barplot(rev(aggbTimeRank$cnt), main="Average Bike Rental by Month", horiz=TRUE,
names.arg=rev(c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "July", "Aug", "Sept", "Oct", "Nov", "Dec")),
ylab="Month", xlab= "Average Bike Rental",
col=c("darkblue"),
xlim=c(0,max(aggbTimeRank$cnt)*1.2),
cex.names=0.8)
text(x= rev(aggbTimeRank$cnt)+300, y= plot, labels=as.character(as.integer(aggbTimeRank$cnt)))
par(las=1) # make label text perpendicular to axis
par(mar=c(5,8,4,2)) # increase y-axis margin.
plot <- barplot(rev(aggbTimeRank$cnt), main="Average Bike Rental by Month", horiz=TRUE,
names.arg=rev(c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "July", "Aug", "Sept", "Oct", "Nov", "Dec")),
ylab="Month", xlab= "Average Bike Rental",
col=c("darkblue"),
xlim=c(0,max(aggbTimeRank$cnt)*1.2),
cex.names=0.8)
text(x= rev(aggbTimeRank$cnt)+300, col=c("blue"), y= plot, labels=as.character(as.integer(aggbTimeRank$cnt)))
aggbTimeRank
par(las=1) # make label text perpendicular to axis
par(mar=c(5,8,4,2)) # increase y-axis margin.
plot <- barplot(rev(aggbTimeRank$cnt), main="Average Bike Rental by Month", horiz=TRUE,
names.arg=rev(c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "July", "Aug", "Sept", "Oct", "Nov", "Dec")),
ylab="Month", xlab= "Average Bike Rental",
col=c("darkblue"),
xlim=c(0,max(aggbTimeRank$cnt)*1.2),
cex.names=0.8)
text(x= aggbTimeRank$cnt+300, col=c("blue"), y= plot, labels=as.character(as.integer(aggbTimeRank$cnt)))
par(las=1) # make label text perpendicular to axis
par(mar=c(5,8,4,2)) # increase y-axis margin.
plot <- barplot(rev(aggbTimeRank$cnt), main="Average Bike Rental by Month", horiz=TRUE,
names.arg=rev(c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "July", "Aug", "Sept", "Oct", "Nov", "Dec")),
ylab="Month", xlab= "Average Bike Rental",
col=c("darkblue"),
xlim=c(0,max(aggbTimeRank$cnt)*1.2),
cex.names=0.8)
text(x= rev(aggbTimeRank$cnt)+300, col=c("blue"), y= plot, labels=as.character(as.integer(aggbTimeRank$cnt)))
par(las=1) # make label text perpendicular to axis
par(mar=c(5,8,4,2)) # increase y-axis margin.
plot <- barplot(rev(aggbTimeRank$cnt), main="Average Bike Rental by Month", horiz=TRUE,
names.arg=rev(c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "July", "Aug", "Sept", "Oct", "Nov", "Dec")),
ylab="Month", xlab= "Average Bike Rental",
col=c("darkblue"),
xlim=c(0,max(aggbTimeRank$cnt)*1.2),
cex.names=0.8)
text(x= rev(aggbTimeRank$cnt)+300, col=c("blue"), y= plot, labels=as.character(as.integer(rev(aggbTimeRank$cnt))))
par(las=1) # make label text perpendicular to axis
par(mar=c(5,8,4,2)) # increase y-axis margin.
plot <- barplot(rev(aggbTimeRank$cnt), main="Average Bike Rentals by Month", horiz=TRUE,
names.arg=rev(c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "July", "Aug", "Sept", "Oct", "Nov", "Dec")),
ylab="Month", xlab= "Average Bike Rental",
col=c("darkblue"),
xlim=c(0,max(aggbTimeRank$cnt)*1.2),
cex.names=0.8)
text(x= rev(aggbTimeRank$cnt)+300, col=c("blue"), y= plot, labels=as.character(as.integer(rev(aggbTimeRank$cnt))))
